{"ast":null,"code":"var _jsxFileName = \"/Users/Polo/Documents/assignment3/wordle-anche/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport toast, { Toaster } from 'react-hot-toast';\nimport BoardContainer from './BoardContainer';\nimport Navbar from './Navbar';\nimport { useState, useEffect, useRef } from 'react';\nimport Keyboard from './Keyboard';\nimport db4 from './db-4.js';\nimport db5 from './db-5.js';\nimport db6 from './db-6.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateRandomIndex = db => {\n  let randomIndex = Math.floor(Math.random() * db.length);\n  return randomIndex;\n};\nconst initialGrid = (rows, cols) => {\n  const initialGrid = [];\n  for (let i = 0; i < rows; i++) {\n    initialGrid[i] = [];\n    for (let j = 0; j < cols; j++) {\n      initialGrid[i][j] = {\n        letter: \"\",\n        color: \"#FFFFFF\"\n      };\n    }\n  }\n  return initialGrid;\n};\nexport default function App() {\n  _s();\n  const [input, setInput] = useState([]);\n  const [inputRow, setInputRow] = useState(0);\n  const dividerRef = useRef(null);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [isActiveBoardId, setIsActiveBoardId] = useState(1);\n  const [boards, setBoards] = useState([{\n    id: 1,\n    rows: 5,\n    cols: 4,\n    grid: initialGrid(5, 4),\n    gridFall: 55,\n    answer: db4[generateRandomIndex(db4)]\n  }, {\n    id: 2,\n    rows: 5,\n    cols: 5,\n    gridFall: 55,\n    grid: initialGrid(5, 5),\n    answer: db5[generateRandomIndex(db5)]\n  }, {\n    id: 3,\n    rows: 5,\n    cols: 6,\n    gridFall: 55,\n    grid: initialGrid(5, 6),\n    answer: db6[generateRandomIndex(db6)]\n  }]);\n  const [activeBoard, setActiveBoard] = useState(boards[0]); // save\n  const didMount = useRef(false);\n  const setGrid = (newGrid, boardId) => {\n    // takes in grid, sets the active board grid\n    setBoards(oldBoards => {\n      const newBoards = [...oldBoards];\n      const boardIndex = boards.findIndex(board => board.id === boardId);\n      newBoards[boardIndex] = {\n        ...newBoards[boardIndex],\n        grid: newGrid\n      };\n      return newBoards;\n    });\n  };\n  useEffect(() => {\n    setActiveBoard(boards.find(board => board.id === isActiveBoardId));\n  }, [isActiveBoardId]);\n  useEffect(() => {\n    if (didMount.current) {} else {\n      didMount.current = true;\n    }\n  }, [isGameOver]);\n  const inputValidator = userInput => {\n    const ans = activeBoard.answer.split(\"\");\n    const subArr = [];\n    const ansArr = [];\n    for (let i = 0; i < userInput.length; i++) {\n      let idx = ans.findIndex(x => x === userInput[i].letter.toLowerCase());\n      if (idx != -1) {\n        if (idx === i) {\n          subArr.push({\n            letter: userInput[i].letter,\n            color: \"#6AAA64\",\n            fontColor: \"#FFFFFF\"\n          });\n        } else {\n          subArr.push({\n            letter: userInput[i].letter,\n            color: \"#C9B458\",\n            fontColor: \"#FFFFFF\"\n          });\n        }\n        ans[idx] = \"\";\n      } else {\n        subArr.push({\n          letter: userInput[i].letter,\n          color: \"#787C7D\",\n          fontColor: \"#FFFFFF\"\n        });\n      }\n    }\n    setBoards(oldBoards => {\n      const newBoards = [...oldBoards];\n      const boardIndex = boards.findIndex(board => board.id === isActiveBoardId);\n      const newGrid = [...newBoards[boardIndex].grid];\n      newGrid[inputRow] = subArr;\n      newBoards[boardIndex] = {\n        ...newBoards[boardIndex],\n        grid: newGrid\n      };\n      return newBoards;\n    });\n    const isAnswer = subArr.every(el => el.color === \"#6AAA64\");\n    if (isAnswer) {\n      if (isActiveBoardId === 3) {\n        toast(\"Winner!\");\n        setIsGameOver(true);\n      } else {\n        toast(\"Nice work. Keep going.\");\n        setIsActiveBoardId(isActiveBoardId + 1);\n        setInputRow(0);\n        return;\n      }\n    }\n    setInputRow(oldInputRow => {\n      return oldInputRow + 1;\n    });\n    if (inputRow + 1 === activeBoard.rows && !isAnswer) {\n      toast(\"Game over.\");\n      setIsGameOver(true);\n      return;\n    }\n    setInput([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(Toaster, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"columns\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-col\",\n          children: /*#__PURE__*/_jsxDEV(BoardContainer, {\n            isGameOver: isGameOver,\n            setIsGameOver: setIsGameOver,\n            board: boards[0],\n            isActiveBoard: isActiveBoardId === 1,\n            setGrid: setGrid,\n            dividerRef: dividerRef,\n            input: input,\n            inputRow: inputRow\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-col\",\n          children: /*#__PURE__*/_jsxDEV(BoardContainer, {\n            isGameOver: isGameOver,\n            setIsGameOver: setIsGameOver,\n            board: boards[1],\n            isActiveBoard: isActiveBoardId === 2,\n            setGrid: setGrid,\n            dividerRef: dividerRef,\n            input: input,\n            inputRow: inputRow\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-col\",\n          children: /*#__PURE__*/_jsxDEV(BoardContainer, {\n            isGameOver: isGameOver,\n            setIsGameOver: setIsGameOver,\n            board: boards[2],\n            isActiveBoard: isActiveBoardId === 3,\n            setGrid: setGrid,\n            dividerRef: dividerRef,\n            input: input,\n            inputRow: inputRow\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"keyboard-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"hr\", {\n            ref: dividerRef,\n            id: \"divider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n            isGameOver: isGameOver,\n            wordLength: boards[isActiveBoardId - 1].cols,\n            inputRow: inputRow,\n            input: input,\n            setInput: setInput,\n            inputValidator: inputValidator\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"i7IzUAFT3EQyyI+TP1UiAbrLvsc=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["toast","Toaster","BoardContainer","Navbar","useState","useEffect","useRef","Keyboard","db4","db5","db6","jsxDEV","_jsxDEV","generateRandomIndex","db","randomIndex","Math","floor","random","length","initialGrid","rows","cols","i","j","letter","color","App","_s","input","setInput","inputRow","setInputRow","dividerRef","isGameOver","setIsGameOver","isActiveBoardId","setIsActiveBoardId","boards","setBoards","id","grid","gridFall","answer","activeBoard","setActiveBoard","didMount","setGrid","newGrid","boardId","oldBoards","newBoards","boardIndex","findIndex","board","find","current","inputValidator","userInput","ans","split","subArr","ansArr","idx","x","toLowerCase","push","fontColor","isAnswer","every","el","oldInputRow","children","fileName","_jsxFileName","lineNumber","columnNumber","className","isActiveBoard","ref","wordLength","_c","$RefreshReg$"],"sources":["/Users/Polo/Documents/assignment3/wordle-anche/src/App.js"],"sourcesContent":["import './App.css';\nimport toast, {Toaster} from 'react-hot-toast';\n\nimport BoardContainer from './BoardContainer';\nimport Navbar from './Navbar';\nimport { useState, useEffect, useRef} from 'react';\nimport Keyboard from './Keyboard';\nimport db4 from './db-4.js';\nimport db5 from './db-5.js';\nimport db6 from './db-6.js';\n\n  const generateRandomIndex = (db) => {\n    let randomIndex = Math.floor(Math.random() * db.length);\n    return randomIndex;\n  }\n\n  const initialGrid = (rows, cols) => {\n    const initialGrid = [];\n    for(let i=0; i<rows; i++) {\n      initialGrid[i] = [];\n      for(let j=0; j<cols; j++){\n        initialGrid[i][j] = {\n          letter: \"\",\n          color: \"#FFFFFF\"\n        }\n      }\n    }\n    return initialGrid;\n  }\n\n\nexport default function App() {\n  const [input, setInput] = useState([]);\n  const [inputRow, setInputRow] = useState(0);\n  const dividerRef = useRef(null);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [isActiveBoardId, setIsActiveBoardId] = useState(1);\n  const [boards, setBoards] = useState([\n      {\n        id: 1,\n        rows: 5,\n        cols: 4,\n        grid: initialGrid(5, 4),\n        gridFall: 55,\n        answer: db4[generateRandomIndex(db4)]\n      },\n      {\n        id: 2,\n        rows: 5,\n        cols: 5,\n        gridFall: 55,\n        grid: initialGrid(5, 5),\n        answer: db5[generateRandomIndex(db5)]\n      },\n      {\n        id: 3,\n        rows: 5,\n        cols: 6,\n        gridFall: 55,\n        grid: initialGrid(5, 6),\n        answer:db6[generateRandomIndex(db6)]\n      }\n    ]);\n  const [activeBoard, setActiveBoard] = useState(boards[0]); // save\n  const didMount = useRef(false);\n\n  const setGrid = (newGrid, boardId) => { // takes in grid, sets the active board grid\n      setBoards((oldBoards) => {\n      const newBoards = [...oldBoards];\n      const boardIndex = boards.findIndex((board) => board.id === boardId);\n      newBoards[boardIndex] =  {...newBoards[boardIndex], grid: newGrid};\n      return newBoards;\n    })\n  }\n\n  useEffect(() => {\n    setActiveBoard(\n      boards.find((board) => board.id === isActiveBoardId)\n    )\n  }, [isActiveBoardId])\n\n  useEffect(() => {\n    if (didMount.current) {\n    } else {\n      didMount.current = true;\n    }\n  }, [isGameOver])\n\n  const inputValidator = (userInput) => {\n    const ans = activeBoard.answer.split(\"\");\n    const subArr = [];\n    const ansArr = [];\n    for(let i=0; i < userInput.length; i++){\n        let idx = ans.findIndex(x => x === userInput[i].letter.toLowerCase());\n        if(idx != -1) {\n        if(idx === i) {\n          subArr.push({\n            letter: userInput[i].letter,\n            color: \"#6AAA64\",\n            fontColor: \"#FFFFFF\"\n          })\n        } else {\n          subArr.push({\n            letter: userInput[i].letter,\n            color: \"#C9B458\",\n            fontColor: \"#FFFFFF\"\n          })\n        }\n        ans[idx]=\"\"\n      }\n      else {\n        subArr.push({\n          letter: userInput[i].letter,\n          color: \"#787C7D\",\n          fontColor: \"#FFFFFF\"\n        })\n      }\n    }\n\n    setBoards((oldBoards) => {\n      const newBoards = [...oldBoards];\n      const boardIndex = boards.findIndex((board) => board.id === isActiveBoardId);\n      const newGrid = [...newBoards[boardIndex].grid];\n      newGrid[inputRow] = subArr;\n      newBoards[boardIndex] =  {...newBoards[boardIndex], grid: newGrid};\n      return newBoards;\n    })\n\n    const isAnswer = subArr.every((el) => el.color === \"#6AAA64\");\n    if(isAnswer) {\n      if(isActiveBoardId === 3) {\n        toast(\"Winner!\");\n        setIsGameOver(true);\n      }\n      else {\n        toast(\"Nice work. Keep going.\");\n        setIsActiveBoardId(isActiveBoardId + 1);\n        setInputRow(0);\n        return;\n      }\n    }\n\n    setInputRow((oldInputRow) => {\n      return oldInputRow + 1;\n    })\n\n    if(inputRow + 1 === activeBoard.rows && !isAnswer) {\n      toast(\"Game over.\")\n      setIsGameOver(true);\n      return;\n    }\n\n    setInput([]);\n  }\n\n  return (\n    <div id=\"main\">\n      <Navbar/>\n      <div id=\"game\">\n        <Toaster/>\n        <div className=\"columns\">\n          <div className=\"board-col\">\n            <BoardContainer isGameOver={isGameOver} setIsGameOver={setIsGameOver} board={boards[0]} isActiveBoard={isActiveBoardId === 1} setGrid={setGrid} dividerRef={dividerRef} input={input} inputRow={inputRow}/>\n          </div>\n          <div className=\"board-col\">\n            <BoardContainer isGameOver={isGameOver} setIsGameOver={setIsGameOver} board={boards[1]} isActiveBoard={isActiveBoardId === 2} setGrid={setGrid} dividerRef={dividerRef} input={input} inputRow={inputRow}/>\n          </div>\n          <div className=\"board-col\">\n            <BoardContainer isGameOver={isGameOver} setIsGameOver={setIsGameOver} board={boards[2]} isActiveBoard={isActiveBoardId === 3} setGrid={setGrid} dividerRef={dividerRef} input={input} inputRow={inputRow}/>\n          </div>\n          <div className=\"keyboard-wrapper\">\n            <hr ref={dividerRef} id=\"divider\"/>\n            <Keyboard isGameOver={isGameOver} wordLength={boards[isActiveBoardId - 1].cols} inputRow={inputRow} input={input} setInput={setInput} inputValidator={inputValidator}/>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}